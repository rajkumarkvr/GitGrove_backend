package models.dao;

import java.sql.Connection;
import java.sql.Statement;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.ArrayList;

import enums.Role;
import enums.Visibility;
import models.Repository;
import services.DBconnection;

public class RepositoryDAO {

	static RepositoryDAO repositoryDAO = null;

	private RepositoryDAO() {

	}

	public static RepositoryDAO getInstance() {
		if(repositoryDAO == null) {
			repositoryDAO = new RepositoryDAO();
		}
		return repositoryDAO;
	}

	public boolean addRepository(String name, String description, String visibility, int owner_id){
		try {
			Connection connection = DBconnection.getConnection();
			PreparedStatement stmt = connection.prepareStatement("insert into repositories(name,visibility,owner_id,description) values(?,?,?,?)",Statement.RETURN_GENERATED_KEYS);
			stmt.setString(1, name);
			stmt.setString(2, Visibility.valueOf(visibility).toString());
			stmt.setInt(3, owner_id);
			stmt.setString(4, description);
			int affected = stmt.executeUpdate();
			int repo_id = -1;
			
			// getting the repository key which is generated by mysql database.
			ResultSet keys = stmt.getGeneratedKeys();
			if(keys.next()) {
				repo_id = keys.getInt(1);
			}
			
			// Maping the Repository with user in repository_access table if repository added.
			if(affected>0) {
				mapRepository(owner_id, repo_id , Role.OWNER);
				return affected>0;
			}
		
		} catch (Exception e) {
			e.printStackTrace();
		}
		return false;
	}

	public ArrayList<Repository> repositoriesByOwnerId(int ownerId){
		ArrayList<Repository> repositories = new ArrayList<Repository>();
		try {
			Connection connection = DBconnection.getConnection();
			PreparedStatement stmt = connection.prepareStatement("select * from repositories where owner_id = ?");
			stmt.setInt(1, ownerId);
			ResultSet rs = stmt.executeQuery();
			if(rs.next()) {
				repositories.add(new Repository(rs.getInt(1),rs.getString(2),Visibility.valueOf(rs.getString(3)),rs.getString(7),rs.getTimestamp(4).toLocalDateTime(),rs.getInt(6)));
			}

		} catch (Exception e) {
			System.out.println(e.getMessage());
		}
		return repositories;
	}
	
	// Takes all the repositories in which the user id exists in any roles.
	public ArrayList<Repository> getAllRepositoryOfUser(int id) {
		ArrayList<Repository> repositories = new ArrayList<Repository>();
		try {
			Connection connection = DBconnection.getConnection();
			PreparedStatement stmt = connection.prepareStatement("select r.id,r.name,r.description,r.visibility,r.createdAt,r.stars_count from repositories r join repository_access ra on r.id=ra.repo_id join users u on u.id = ra.user_id where ra.user_id=?");
			stmt.setInt(1, id);
			ResultSet rs = stmt.executeQuery();
			while(rs.next()) {
				repositories.add(new Repository(rs.getInt(1), rs.getString(2), Visibility.valueOf(rs.getString(4)), rs.getString(3), rs.getTimestamp(5).toLocalDateTime(), rs.getInt(6)));
			}
		} catch (Exception e) {
			// TODO: handle exception
		}
		return repositories;
	}
	
	// Getting repository details using repository Id.
	public Repository getRepository(int id) {
		Repository repository = null;
		try {
			Connection connection = DBconnection.getConnection();
			PreparedStatement stmt = connection.prepareStatement("select * from repositories where id = ?");
			stmt.setInt(1, id);
			ResultSet rs = stmt.executeQuery();
			if(rs.next()) {
				repository = new Repository(rs.getInt(1),rs.getString(2),Visibility.valueOf(rs.getString(3)),rs.getString(7),rs.getTimestamp(4).toLocalDateTime(),rs.getInt(6));
			}
		} catch (Exception e) {
			System.out.println(e.getMessage());
		}
		return repository;
	}
	
	
	// To Map repositories with the users using repositoy_access database.
	public void mapRepository (int user_id,int repo_id,Role role) {
		try {
			Connection connection = DBconnection.getConnection();
			PreparedStatement stmt = connection.prepareStatement("insert into repository_access(user_id,repo_id,role) values(?,?,?)");
			stmt.setInt(1, user_id);
			stmt.setInt(2, repo_id);
			stmt.setString(3, role.toString());
			stmt.executeUpdate();
			
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	
	
	

}
